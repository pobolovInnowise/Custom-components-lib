{"version":3,"file":"stories-Button-stories.e4409d5c52173555d6d5.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AAWA;AAMA;AACA;AAKA;AACA;AAKA;AACA;AAEA;AACA;AAAA;AACA;;;;;;AAGA;AAEA","sources":["webpack://task11_v2/./src/Components/Button/Button.tsx"],"sourcesContent":["// import React from \"react\";\n// import * as styles from './Button.module.css';\n//\n// type ButtonVariant = 'text' | 'contained' | 'outlined';\n// type ButtonSize = 'small' | 'medium' | 'large';\n//\n// type ButtonProps = {\n//     variant?: ButtonVariant;\n//     size?: ButtonSize;\n//     disabled?: boolean;\n//     onClick?: () => void;\n//     children?: React.ReactNode;\n// };\n//\n// const Button: React.FC<ButtonProps> = (props) => {\n//\n//     let buttonVariantClass: 'buttonText' | 'buttonContained' | 'buttonOutlined' = 'buttonText';\n//     if (props.variant === 'contained') buttonVariantClass = 'buttonContained';\n//     else if (props.variant === 'outlined') buttonVariantClass = 'buttonOutlined';\n//\n//\n//     let buttonSizeClass: 'sizeSmall' | 'sizeMedium' | 'sizeLarge' = 'sizeSmall';\n//     if (props.size === 'medium') buttonSizeClass = 'sizeMedium';\n//     else if (props.size === 'large') buttonSizeClass = 'sizeLarge';\n//\n//\n//     const clazz = `${styles[buttonVariantClass as keyof typeof styles]} ${styles[buttonSizeClass as keyof typeof styles]}`;\n//\n//\n//     return (\n//         <button className={clazz} {...props} onClick={props.onClick}>\n//             {props.children}\n//         </button>\n//     );\n// };\n//\n// export default Button;\n\n\nimport React from \"react\";\nimport styles from \"./Button.module.css\";\n\ntype ButtonVariant = 'text' | 'contained' | 'outlined';\ntype ButtonSize = 'small' | 'medium' | 'large';\n\n// Наследуем все стандартные пропсы кнопки\ntype ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n    variant?: ButtonVariant;\n    size?: ButtonSize;\n};\n\nconst Button: React.FC<ButtonProps> = ({\n                                           variant = 'text',\n                                           size = 'small',\n                                           children,\n                                           ...rest\n                                       }) => {\n    // Определяем CSS-класс для варианта кнопки\n    const buttonVariantClass: 'buttonText' | 'buttonContained' | 'buttonOutlined' =\n        variant === 'contained' ? 'buttonContained' :\n            variant === 'outlined' ? 'buttonOutlined' :\n                'buttonText';\n\n    // Определяем CSS-класс для размера кнопки\n    const buttonSizeClass: 'sizeSmall' | 'sizeMedium' | 'sizeLarge' =\n        size === 'medium' ? 'sizeMedium' :\n            size === 'large' ? 'sizeLarge' :\n                'sizeSmall';\n\n    // Формируем итоговый CSS-класс\n    const clazz = `${styles[buttonVariantClass]} ${styles[buttonSizeClass]}`;\n\n    return (\n        <button className={clazz} {...rest}>\n            {children}\n        </button>\n    );\n};\n\nexport default Button;\n"],"names":[],"sourceRoot":""}