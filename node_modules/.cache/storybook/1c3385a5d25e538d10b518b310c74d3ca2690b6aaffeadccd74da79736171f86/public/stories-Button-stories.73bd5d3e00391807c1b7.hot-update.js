"use strict";
self["webpackHotUpdatetask11_v2"]("stories-Button-stories",{

/***/ "./src/Components/Button/Button.tsx":
/*!******************************************!*\
  !*** ./src/Components/Button/Button.tsx ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Button_module_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Button.module.css */ "./src/Components/Button/Button.module.css");



const Button = (props)=>{
    // Определяем CSS-класс для варианта кнопки
    let buttonVariantClass = 'buttonText';
    if (props.variant === 'contained') buttonVariantClass = 'buttonContained';
    else if (props.variant === 'outlined') buttonVariantClass = 'buttonOutlined';
    // Определяем CSS-класс для размера кнопки
    let buttonSizeClass = 'sizeSmall';
    if (props.size === 'medium') buttonSizeClass = 'sizeMedium';
    else if (props.size === 'large') buttonSizeClass = 'sizeLarge';
    // Формируем итоговый CSS-класс
    const clazz = `${_Button_module_css__WEBPACK_IMPORTED_MODULE_2__["default"][buttonVariantClass]} ${_Button_module_css__WEBPACK_IMPORTED_MODULE_2__["default"][buttonSizeClass]}`;
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("button", {
        className: clazz,
        ...props,
        onClick: props.onClick,
        children: props.children
    }, void 0, false, {
        fileName: "/Users/macbook/Desktop/task11_v2/src/Components/Button/Button.tsx",
        lineNumber: 30,
        columnNumber: 9
    }, undefined);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Button);
Button.__docgenInfo = {
    "description": "",
    "methods": [],
    "displayName": "Button",
    "props": {
        "variant": {
            "required": false,
            "tsType": {
                "name": "union",
                "raw": "'text' | 'contained' | 'outlined'",
                "elements": [
                    {
                        "name": "literal",
                        "value": "'text'"
                    },
                    {
                        "name": "literal",
                        "value": "'contained'"
                    },
                    {
                        "name": "literal",
                        "value": "'outlined'"
                    }
                ]
            },
            "description": ""
        },
        "size": {
            "required": false,
            "tsType": {
                "name": "union",
                "raw": "'small' | 'medium' | 'large'",
                "elements": [
                    {
                        "name": "literal",
                        "value": "'small'"
                    },
                    {
                        "name": "literal",
                        "value": "'medium'"
                    },
                    {
                        "name": "literal",
                        "value": "'large'"
                    }
                ]
            },
            "description": ""
        },
        "disabled": {
            "required": false,
            "tsType": {
                "name": "boolean"
            },
            "description": ""
        },
        "onClick": {
            "required": false,
            "tsType": {
                "name": "signature",
                "type": "function",
                "raw": "() => void",
                "signature": {
                    "arguments": [],
                    "return": {
                        "name": "void"
                    }
                }
            },
            "description": ""
        },
        "children": {
            "required": false,
            "tsType": {
                "name": "ReactReactNode",
                "raw": "React.ReactNode"
            },
            "description": ""
        }
    }
};


/***/ })

});
//# sourceMappingURL=stories-Button-stories.73bd5d3e00391807c1b7.hot-update.js.map